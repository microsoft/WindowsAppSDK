parameters:
  buildPlatform: ''
  buildConfiguration: ''
  TaefSelect: '*'
  BinaryCompatSwitch: ''
  testLocale: ''

steps:
  - task: powershell@2
    displayName: 'DevCheck: Setup/Verify development environment'
    inputs:
      targetType: filePath
      filePath: tools\DevCheck\DevCheck.ps1
      arguments: -NoInteractive -Offline -Verbose -CheckTestPfx -Clean -CheckDependencies -CheckVisualStudio -ShowSystemInfo
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Foundation'
    inputs:
      source: specific
      runVersion: specific
      project: $(System.TeamProjectId)
      pipeline: $(_useBuildOutputFromPipeline)
      pipelineId: $(_useBuildOutputFromBuildId)
      artifactName: "FoundationBinaries_$(buildConfiguration)_$(buildPlatform)"
      targetPath: '$(Build.SourcesDirectory)\BuildOutput'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Foundation'
    inputs:
      source: specific
      runVersion: specific
      project: $(System.TeamProjectId)
      pipeline: $(_useBuildOutputFromPipeline)
      pipelineId: $(_useBuildOutputFromBuildId)
      artifactName: "MrtBinaries_$(buildConfiguration)_$(buildPlatform)"
      targetPath: '$(Build.SourcesDirectory)\BuildOutput'

  - task: CopyFiles@2
    displayName: Download published redist files
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\BuildOutput\redist'
      TargetFolder: '$(Build.SourcesDirectory)\redist'

  - task: powerShell@2
    displayName: 'Enable developer mode'
    inputs:
      targetType: 'inline'
      script: |
            $RegistryKeyPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock"
            if (-not(Test-Path -Path $RegistryKeyPath))
            {
                New-Item -Path $RegistryKeyPath -ItemType Directory -Force
            }

            New-ItemProperty -Path $RegistryKeyPath -Name AllowDevelopmentWithoutDevLicense -PropertyType DWORD -Value 1 -Force
            reg add HKLM\Software\Policies\Microsoft\Windows\Appx /v AllowDevelopmentWithoutDevLicense /t REG_DWORD /d 1 /f

  - task: powerShell@2
    displayName: 'Install certificates in payload'
    inputs:
      targetType: 'inline'
      script: |
            foreach($cerFile in (Get-ChildItem -Path '$(Build.SourcesDirectory)\BuildOutput' '*.cer' -Recurse))
            {
              Write-Host "Adding cert $($cerFile.FullName)"
              certutil -addstore TrustedPeople $($cerFile.FullName)
              certutil -addstore root $($cerFile.FullName)
            }

  - task: powerShell@2
    displayName: 'Run dotnet installer'
    inputs:
      targetType: 'inline'
      script: |
            $(Build.SourcesDirectory)\redist\dotnet-windowsdesktop-runtime-installer.exe /quiet /install /norestart

  - task: powerShell@2
    displayName: 'Install VCLibs.Desktop'
    inputs:
      targetType: 'inline'
      script: |
            $package = "$(Build.SourcesDirectory)\redist\Microsoft.VCLibs.${{ parameters.buildPlatform }}.14.00.Desktop.appx"
            Add-AppxPackage $package -ErrorAction SilentlyContinue

  - task: powerShell@2
    displayName: 'Install vc_redist'
    inputs:
      targetType: 'inline'
      script: |
            $(Build.SourcesDirectory)\redist\vc_redist.${{ parameters.buildPlatform }}.exe /quiet /install /norestart

  - task: powershell@2
    displayName: 'Run TE.Service'
    inputs:
      targetType: filePath
      filePath: tools\DevCheck\DevCheck.ps1
      arguments: -NoInteractive -Offline -Verbose -CheckTAEFService -ShowSystemInfo
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: VisualStudioTestPlatformInstaller@1
    inputs:
      versionSelector: latestStable

  - task: PowerShell@2
    displayName: Add test locale to User Language List
    inputs:
      targetType: 'inline'
      script: |
            $langToAdd = "${{ parameters.testLocale }}"

            Write-Host "Adding $langToAdd to user language list"
            $langList = Get-WinUserLanguageList
            $langList.Insert(0, $langToAdd)
            Set-WinUserLanguageList -LanguageList $langList -Force

            Write-Host "Get-WinUserLanguageList:"
            Get-WinUserLanguageList

  - task: PowerShell@2
    displayName: Display OS build/version/language info
    inputs:
      targetType: 'inline'
      script: |
            Get-Item -Path 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion'
            Write-Host (reg query "HKLM\SYSTEM\CurrentControlSet\Control\MUI" /s)
            Write-Host (reg query "HKLM\SYSTEM\CurrentControlSet\Control\Nls" /s)
            Write-Host (reg query "HKCU\Control Panel\International" /s)

            Write-Host "Get-WmiObject -Class Win32_OperatingSystem"
            $OSInfo = Get-WmiObject -Class Win32_OperatingSystem
            $languagePacks = $OSInfo.MUILanguages
            $languagePacks

            Write-Host "dism /online /Get-Intl"
            dism /online /Get-Intl

            Write-Host "Get-WinUserLanguageList"
            Get-WinUserLanguageList

            Write-Host "Get-WinUILanguageOverride"
            Get-WinUILanguageOverride

            Write-Host "Get-WinSystemLocale"
            Get-WinSystemLocale

            Write-Host "WhoAmI"
            Write-Host (whoami /user /groups /priv)

  - task: PowerShell@2
    displayName: 'Dump services'
    inputs:
      targetType: 'inline'
      script: |
        Get-Service
        Get-Service | Write-Host
        Get-Service | Out-Host
        sc.exe queryex te.service | Write-Host
        sc.exe qc te.service | Write-Host

  - task: PowerShell@2
    displayName: 'Run TAEF Tests'
    inputs:
      filePath: 'TestAll.ps1'
      arguments: >
        -OutputFolder "$(Build.SourcesDirectory)\BuildOutput"
        -Platform "${{ parameters.buildPlatform }}"
        -Configuration "${{ parameters.buildConfiguration }}"
        -Test
        -List
