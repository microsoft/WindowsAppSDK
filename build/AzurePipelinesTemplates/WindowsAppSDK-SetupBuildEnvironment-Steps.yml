parameters:
- name: "IsOneBranch"
  type: boolean
  default: true

steps:
- task: UseDotNet@2
  displayName: Use .NET Core SDK 6
  inputs:
    version: 6.0.414

  # Extract the build revision number from Build.BuildNumber. This is needed to pass to build-nupkg.
  # This relies on the format of the pipeline name being of the format: $(date:yyMM).$(date:dd)$(rev:rrr)
  # We can't use those variables here (they only work in the *name* of the top level Yaml), so
  # pull them out here and set the variables for use in the nuget package version.
- powershell: |
    # Some builds have "-branchname" appended, but when this happens the environment variable
    # TFS_BUILDNUMBER has the un-modified version.
    if ($env:TFS_BUILDNUMBER)
    {
      $env:BUILD_BUILDNUMBER = $env:TFS_BUILDNUMBER
    }
    $yymm = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 10, 4)
    $dd = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 5, 2)
    $revision = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 3, 3)
    Write-Host "##vso[task.setvariable variable=builddate]$yymm$dd"
    Write-Host "##vso[task.setvariable variable=builddate_yymm]$yymm"
    Write-Host "##vso[task.setvariable variable=builddate_dd]$dd"
    Write-Host "##vso[task.setvariable variable=buildrevision]$revision"

    Write-Host builddate=$yymm$dd
    Write-Host builddate_yymm=$yymm
    Write-Host builddate_dd=$dd
    Write-Host buildrevision=$revision
  displayName: 'Get build revision number'

# The environment variable VCToolsInstallDir isn't defined on lab machines, so we need to retrieve it ourselves.
- script: |
    "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -Latest -requires Microsoft.Component.MSBuild -property InstallationPath > %TEMP%\vsinstalldir.txt
    set /p _VSINSTALLDIR15=<%TEMP%\vsinstalldir.txt
    del %TEMP%\vsinstalldir.txt
    call "%_VSINSTALLDIR15%\Common7\Tools\VsDevCmd.bat"
    echo VCToolsInstallDir = %VCToolsInstallDir%
    echo ##vso[task.setvariable variable=VCToolsInstallDir]%VCToolsInstallDir%

  displayName: 'Retrieve VC tools directory'

- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: 'WindowsES'

- task: PowerShell@2
  displayName: 'Add Windows SDK 10.1.17763'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  inputs:
    targetType: filePath
    filePath: $(Build.SourcesDirectory)\build\scripts\windows-sdk.ps1
    arguments: >
      -SdkVersion "10.1.17763"

- ${{ if not( parameters.IsOneBranch ) }}:
  - task: powershell@2
    inputs:
      targetType: filePath
      filePath: build\scripts\Install-WindowsSdkISO.ps1
      arguments: 18362
    displayName: 'Install Insider SDK (18362)'

- task: powershell@2
  displayName: 'DevCheck: Setup/Verify development environment'
  inputs:
    targetType: filePath
    filePath: tools\DevCheck\DevCheck.ps1
    arguments: -NoInteractive -Offline -Verbose -CheckTestPfx -Clean -CheckDependencies -CheckVisualStudio -ShowSystemInfo
    workingDirectory: '$(Build.SourcesDirectory)'

- task: PowerShell@2
  displayName: GenerateVersionInfo
  inputs:
    filePath: '$(Build.SourcesDirectory)\build\VersionInfo\GenerateVersionInfo.ps1'
    arguments: >
      -ProductMajor "$(major)"
      -ProductMinor "$(minor)"

- task: PowerShell@2
  displayName: 'Download dotnet installer'
  condition: or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64'), eq(variables['buildPlatform'], 'arm64'))
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)\build\scripts\DownloadDotNetRuntimeInstaller.ps1'
    arguments: -Platform "$(buildPlatform)" -OutputDirectory "$(build.SourcesDirectory)\redist"

- task: PowerShell@2
  displayName: 'Download vcredist installer'
  condition: or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64'), eq(variables['buildPlatform'], 'arm64'))
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)\build\scripts\DownloadVCRedistInstaller.ps1'
    arguments: -Platform "$(buildPlatform)" -OutputDirectory "$(build.SourcesDirectory)\redist"

- task: PowerShell@2
  displayName: 'Download desktop bridge CRT'
  condition: or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64'), eq(variables['buildPlatform'], 'arm64'))
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)\build\scripts\DownloadVCLibsDesktop.ps1'
    arguments: -Platform "$(buildPlatform)" -OutputDirectory "$(build.SourcesDirectory)\redist"

- task: powershell@2
  displayName: 'Create DynamicDependencies TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-DynamicDependency.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.ApplicationModel.DynamicDependency -Output $(Build.SourcesDirectory)\dev\common\MddTerminalVelocityFeatures.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create DeploymentAPI TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-DeploymentAPI.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.ApplicationModel.WindowsAppRuntime -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-DeploymentAPI.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create ApplicationData TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-ApplicationData.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.Storage.ApplicationData -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-ApplicationData.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create BackgroundTask TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-BackgroundTask.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.ApplicationModel.Background -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-BackgroundTask.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create AppNotifications TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-AppNotifications.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.AppNotifications -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-AppNotifications.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create CallingPreviewSupport TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-AppNotifications.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.CallingPreviewSupport -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-CallingPreviewSupport.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create PushNotifications TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-PushNotifications.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.PushNotifications -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-PushNotifications.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create EnvironmentManager TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-EnvironmentManager.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.System -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-EnvironmentManager.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create PackageManager TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-PackageManager.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.Management.Deployment -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-PackageManager.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create CameraCaptureUI TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-CameraCaptureUI.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.Media.Capture -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-CameraCaptureUI.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create OAuth2Manager TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-OAuth.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Security.Authentication.OAuth -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-OAuth.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  name: UpdateTraceloggingConfig
  inputs:
    targetType: 'inline'
    script: |
      $srcPath = Get-Childitem -Path 'dev\WindowsAppRuntime_Insights\packages' -File 'MicrosoftTelemetry.h' -Recurse

      if (($srcPath -ne $null)){
        $destinationPaths = Get-Childitem -Path 'packages' -File 'Traceloggingconfig.h' -Recurse

        if (($destinationPaths -ne $null)) {
          foreach ($destPath in $destinationPaths) {
            Write-Host 'SourcePath:' $srcPath.FullName
            Write-Host 'DestinationPath:' $destPath.FullName
            Copy-Item -Force $srcPath.FullName $destPath.FullName
          }
        }
      }
