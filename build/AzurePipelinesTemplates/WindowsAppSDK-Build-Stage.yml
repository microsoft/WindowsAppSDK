parameters:
- name: "SignOutput"
  type: boolean
  default: false
- name: "IsOneBranch"
  type: boolean
  default: true
- name: runApiScan
  type: boolean
  default: true
- name: runPREfast
  type: boolean
  default: false

stages:
- stage: ${{ iif(parameters.runPREfast, 'PREfast_AnyCPU', 'Build_AnyCPU') }}
  # Skip the build job if we are reusing the output of a previous build.
  # useBuildOutputFromBuildId variable is set on the Pipeline at Queue time.
  condition:
    eq(variables['useBuildOutputFromBuildId'],'')
  dependsOn: []
  jobs:
  - job: VerifyCopyrightHeaders
    dependsOn: []
    pool:
      type: windows
      isCustom: true
      name: 'ProjectReunionESPool-2022' # This stage is purely a test stage so we will use our own pools here
    steps:
    - task: powershell@2
      displayName: 'Verify copyright headers'
      inputs:
        targetType: filePath
        filePath: tools\VerifyCopyrightHeaders.ps1

  - job: BuildFoundation_release_anycpu
    # For now, this job just builds Microsoft.WindowsAppRuntime.Bootstrap.Net.dll in AnyCPU
    # Can be expanded to add any other binary as needed
    pool:
      ${{ if parameters.IsOneBranch }}:
        type: windows
      ${{ if not( parameters.IsOneBranch ) }}:
        type: windows
        isCustom: true
        name: 'ProjectReunionESPool-2022'
    variables:
      ob_outputDirectory: '$(REPOROOT)\out'
      ob_sdl_codeSignValidation_excludes: '-|**\Release\**'
      ${{ if parameters.runPREfast }}:
        ob_artifactBaseName: "FoundationBinaries_release_anycpu_PREfast"
      ${{ if not( parameters.runPREfast ) }}:
        ob_artifactBaseName: "FoundationBinaries_release_anycpu"
      ${{ if parameters.runApiScan }}:
        ob_sdl_apiscan_enabled: true
      ${{ if not( parameters.runApiScan ) }}:
        ob_sdl_apiscan_enabled: false
      ob_sdl_apiscan_softwareFolder: '$(build.SourcesDirectory)\BuildOutput\Release\AnyCPU'
      ob_sdl_apiscan_symbolsFolder: '$(build.SourcesDirectory)\BuildOutput\Release\AnyCPU;SRV*https://symweb.azurefd.net'
      ob_sdl_checkCompliantCompilerWarnings: true # This setting has no effect unless ob_sdl_msbuildOverride below is also set to true.
      ob_sdl_prefast_runDuring: 'Guardian' # The default 'Build' setting does not match the fact that we are calling msbuild.exe directly.
      ob_sdl_msbuildOverride: true # Because we are calling MSBuild directly instead of through the MSBuild@1 or VSBuild@1 tasks.       
    steps:
    - template: WindowsAppSDK-BuildFoundation-AnyCPU-Steps.yml@self
      parameters:
        SignOutput: ${{ parameters.SignOutput }}
        IsOneBranch: ${{ parameters.IsOneBranch }}
        runPREfast : ${{ parameters.runPREfast }}

# extract BuildFoundation and BuildMRT into WindowsAppSDK-Build-Stage-Per-Platform.yml. Separate the build stage per platform

- template: WindowsAppSDK-Build-Per-Platform-Stage.yml@self
  parameters:
    SignOutput: ${{ parameters.SignOutput }}
    IsOneBranch: ${{ parameters.IsOneBranch }}
    runPREfast : ${{ parameters.runPREfast }}
    runApiScan : ${{ parameters.runApiScan }}
    BuildPlatform: x64

- ${{ if not(parameters.runPREfast) }}:
  - template: WindowsAppSDK-Build-Per-Platform-Stage.yml@self
    parameters:
      SignOutput: ${{ parameters.SignOutput }}
      IsOneBranch: ${{ parameters.IsOneBranch }}
      runPREfast : ${{ parameters.runPREfast }}
      runApiScan : ${{ parameters.runApiScan }}
      BuildPlatform: x86

  - template: WindowsAppSDK-Build-Per-Platform-Stage.yml@self
    parameters:
      SignOutput: ${{ parameters.SignOutput }}
      IsOneBranch: ${{ parameters.IsOneBranch }}
      runPREfast : ${{ parameters.runPREfast }}
      runApiScan : ${{ parameters.runApiScan }}
      BuildPlatform: arm64
