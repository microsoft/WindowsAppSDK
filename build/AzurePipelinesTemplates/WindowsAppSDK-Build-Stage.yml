parameters:
- name: "SignOutput"
  type: boolean
  default: false
- name: "IsOneBranch"
  type: boolean
  default: true
- name: runStaticAnalysis
  type: boolean
  default: true

stages:
- stage: Verify_Copyright_Headers_and_Build_anycpu
  # Skip the build job if we are reusing the output of a previous build.
  # useBuildOutputFromBuildId variable is set on the Pipeline at Queue time.
  condition:
    eq(variables['useBuildOutputFromBuildId'],'')
  dependsOn: []
  jobs:
  - job: VerifyCopyrightHeaders
    dependsOn: []
    pool:
      type: windows
      isCustom: true
      name: 'ProjectReunionESPool-2022' # This stage is purely a test stage so we will use our own pools here
    steps:
    - task: powershell@2
      displayName: 'Verify copyright headers'
      inputs:
        targetType: filePath
        filePath: tools\VerifyCopyrightHeaders.ps1

  - job: BuildFoundation_release_anycpu
    # For now, this job just builds Microsoft.WindowsAppRuntime.Bootstrap.Net.dll in AnyCPU
    # Can be expanded to add any other binary as needed
    pool:
      ${{ if parameters.IsOneBranch }}:
        type: windows
      ${{ if not( parameters.IsOneBranch ) }}:
        type: windows
        isCustom: true
        name: 'ProjectReunionESPool-2022'
    variables:
      ob_outputDirectory: '$(REPOROOT)\out'
      ob_sdl_codeSignValidation_excludes: '-|**\Release\**'
      ob_artifactBaseName: "FoundationBinaries_release_anycpu"
      ${{ if parameters.runStaticAnalysis }}:
        ob_sdl_apiscan_enabled: true
      ${{ if not( parameters.runStaticAnalysis ) }}:
        ob_sdl_apiscan_enabled: false
      ob_sdl_apiscan_softwareFolder: '$(build.SourcesDirectory)\BuildOutput\Release\AnyCPU'
      ob_sdl_apiscan_symbolsFolder: '$(build.SourcesDirectory)\BuildOutput\Release\AnyCPU;SRV*https://symweb.azurefd.net'
    steps:
    - template: WindowsAppSDK-BuildFoundation-AnyCPU-Steps.yml@self
      parameters:
        SignOutput: ${{ parameters.SignOutput }}
        IsOneBranch: ${{ parameters.IsOneBranch }}
        runStaticAnalysis : ${{ parameters.runStaticAnalysis }}

    # This is a temporarily workaround to avoid getting non-fatal "folder C:\__t\NativeCompilerPrefast not found"
    # errors from the Guardian PREfast task, which shouldn't even be run in the first place, because its pre-
    # requisite of isNative=true isn't met currently.
    - script: |
        md "C:\__t\NativeCompilerPrefast"
      displayName: 'Creating C:\__t\NativeCompilerPrefast to prevent errors from Guardian PREfast'

# extract BuildFoundation and BuildMRT into WindowsAppSDK-Build-Stage-Per-Platform.yml. Separate the build stage per platform
- template: WindowsAppSDK-Build-Stage-Per-Platform.yml@self
  parameters:
    SignOutput: ${{ parameters.SignOutput }}
    IsOneBranch: ${{ parameters.IsOneBranch }}
    BuildPlatform: x86

- template: WindowsAppSDK-Build-Stage-Per-Platform.yml@self
  parameters:
    SignOutput: ${{ parameters.SignOutput }}
    IsOneBranch: ${{ parameters.IsOneBranch }}
    BuildPlatform: x64

- template: WindowsAppSDK-Build-Stage-Per-Platform.yml@self
  parameters:
    SignOutput: ${{ parameters.SignOutput }}
    IsOneBranch: ${{ parameters.IsOneBranch }}
    BuildPlatform: arm64