parameters:
- name: "SignOutput"
  type: boolean
  default: false
- name: "IsOneBranch"
  type: boolean
  default: true
- name: runStaticAnalysis
  type: boolean
  default: true

steps:
- template: WindowsAppSDK-SetupBuildEnvironment-Steps.yml
  parameters:
    IsOneBranch: ${{ parameters.IsOneBranch }}

- task: WinUndockNativeCompiler@1
  displayName: 'Setup native compiler version override'
  inputs:
    microsoftDropReadPat: $(System.AccessToken)
    compilerPackageName: $(localCompilerOverridePackageName)
    compilerPackageVersion: $(localCompilerOverridePackageVersion)
    slnDirectory: $(Build.SourcesDirectory)\dev\MRTCore\mrt
    includeUCRT: true
    ucrtFeedPat: $(System.AccessToken)
    platform: $(buildPlatform)

- task: PowerShell@2
  name: BuildBinaries
  retryCountOnTaskFailure: 10
  inputs:
    filePath: 'BuildAll.ps1'
    arguments: -Platform "$(buildPlatform)" -Configuration "$(buildConfiguration)" -AzureBuildStep "BuildMRT"

- ${{ if eq(parameters.runStaticAnalysis, 'true') }}:
  - task: SDLNativeRules@3
    displayName: Run PREfast SDL Native Rules
    condition: and(succeeded(), eq(variables['buildPlatform'], 'x64'), eq(variables['buildConfiguration'], 'Release'))
    inputs:
      setupCommandlines: '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsMSBuildCmd.bat"'
      msBuildArchitecture: amd64
      msBuildCommandline: 'msbuild.exe /nologo /nr:false /p:configuration=Release /p:platform=x64 $(Build.SourcesDirectory)\dev\MRTCore\mrt\MrtCore.sln'
      # Generally speaking, we leave it to the external repos to scan the bits in their packages.
      excludedPaths: |
        $(Build.SourcesDirectory)\packages
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    continueOnError: true

  # Copy build output to folder APIScanTarget for APIScan to scan, in the mean time, exclude some folders/files.
  - task: CopyFiles@2
    displayName: Populate APIScanTarget
    condition: and(succeeded(), eq(variables['ob_sdl_apiscan_enabled'], 'true'))
    inputs:
      SourceFolder: '$(build.SourcesDirectory)\BuildOutput'
      TargetFolder: '$(build.SourcesDirectory)\APIScanTarget'
      contents: |
        **
        !**\*test*\**
        !**\*.binlog
        !**\*.json
    continueOnError: true

  #- script: |
  #    dir /s $(Build.SourcesDirectory)\APIScanTarget
  #  displayName: 'DIAG: dir $(Build.SourcesDirectory)\APIScanTarget'
  #  condition: and(succeededOrFailed(), eq(variables['ob_sdl_apiscan_enabled'], 'true'))
  #  continueOnError: true

# component detection must happen *within* the build task
- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0

- ${{ if eq(parameters.SignOutput, 'true') }}:
  - template: AzurePipelinesTemplates/WindowsAppSDK-EsrpCodeSigning-Steps.yml@WindowsAppSDKConfig
    parameters:
      FolderPath: '$(build.SourcesDirectory)\BuildOutput'
      UseMinimatch: true
      Pattern: |
        **/*.winmd
        **/*.dll
        **/*.exe
      KeyCode: 'CP-230012'
      displayName: 'Authenticode CodeSign Binaries'

- task: CopyFiles@2
  displayName: MoveToOutputDirectory
  condition: always()
  inputs:
    SourceFolder: '$(build.SourcesDirectory)\BuildOutput'
    TargetFolder: '$(ob_outputDirectory)'

- ${{ if not( parameters.IsOneBranch ) }}:
  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: '$(ob_outputDirectory)'
      artifactName: '$(ob_artifactBaseName)'
