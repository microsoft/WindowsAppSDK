parameters:
- name: "SignOutput"
  type: boolean
  default: false
- name: "IsOneBranch"
  type: boolean
  default: true
- name: runStaticAnalysis
  type: boolean
  default: true
- name: runApiScan
  type: boolean
  default: true
- name: runPREfast
  type: boolean
  default: false
- name: buildPlatform
  type: string
  default: x64

stages:
- stage: ${{ format(iif(parameters.runPREfast, 'PREfast_{0}', 'Build_{0}'), parameters.buildPlatform) }}
  # Skip the build job if we are reusing the output of a previous build.
  # useBuildOutputFromBuildId variable is set on the Pipeline at Queue time.
  condition:
    eq(variables['useBuildOutputFromBuildId'],'')
  dependsOn: []
  jobs:
  - job: BuildFoundation
    pool:
      ${{ if parameters.IsOneBranch }}:
        type: windows
      ${{ if not( parameters.IsOneBranch ) }}:
        type: windows
        isCustom: true
        name: 'ProjectReunionESPool-2022'
    timeoutInMinutes: 120
    strategy:
      maxParallel: 10
      matrix:
        ${{ format('Release_{0}', parameters.buildPlatform) }}:
          ${{ if ne(parameters.buildPlatform, 'arm64') }}:
            buildPlatform: ${{ parameters.buildPlatform }}
            buildConfiguration: 'release'
            normalizedConfiguration: 'fre'
            PGOBuildMode: 'Optimize'
          ${{ else }}:
            buildPlatform: ${{ parameters.buildPlatform }}
            buildConfiguration: 'release'
            normalizedConfiguration: 'fre'
    variables:
      - name: ob_outputDirectory
        value: '$(REPOROOT)\out'
      - name: ob_sdl_codeSignValidation_excludes
        value: '-|**\Release\**;-|**\packages\**'
      - name: ob_artifactBaseName
        value: "FoundationBinaries_$(buildConfiguration)_$(buildPlatform)"
      - name: ob_sdl_apiscan_enabled
        ${{ if parameters.runApiScan }}:
          value: true
        ${{ else }}:
          value: false
      - name: ob_sdl_apiscan_softwareFolder
        value: '$(build.SourcesDirectory)\APIScanTarget'
      - name: ob_sdl_apiscan_symbolsFolder
        value: '$(build.SourcesDirectory)\APIScanTarget;SRV*https://symweb.azurefd.net'
      - template: AzurePipelinesTemplates/WindowsAppSDK-Global-LKGVersions.yml@WindowsAppSDKConfigSourceBranch
      - name: localCompilerOverridePackageName
        value: $[coalesce(variables.compilerOverridePackageName, variables.global_CompilerOverridePackageName)]
      - name: localCompilerOverridePackageVersion
        value: $[coalesce(variables.compiflerOverridePackageVersion, variables.global_CompilerOverridePackageVersion)]
      - name: localCompilerOverrideNupkgVersion
        value: $[coalesce(variables.compilerOverrideNupkgVersion, variables.global_CompilerOverrideNupkgVersion)]    
    steps:
    - script: |
        echo Build.SourceBranch=$(Build.SourceBranch)
        echo Build.Reason=$(Build.Reason)
        echo compilerOverridePackageName=$(compilerOverridePackageName)
        echo compilerOverridePackageVersion=$(compilerOverridePackageVersion)
        echo global_CompilerOverridePackageName=$(global_CompilerOverridePackageName)
        echo global_CompilerOverridePackageVersion=$(global_CompilerOverridePackageVersion)
        echo localCompilerOverridePackageName=$(localCompilerOverridePackageName)
        echo localCompilerOverridePackageVersion=$(localCompilerOverridePackageVersion)
        echo localCompilerOverrideNupkgVersion=$(localCompilerOverrideNupkgVersion)
        echo System.PullRequest.targetBranchName=$(System.PullRequest.targetBranchName)
        echo mySourceBranch=$(mySourceBranch)        

    - template: WindowsAppSDK-BuildFoundation-Steps.yml@self
      parameters:
        SignOutput: ${{ parameters.SignOutput }}
        IsOneBranch: ${{ parameters.IsOneBranch }}
        runApiScan: ${{ parameters.runApiScan }}
        runPREfast: ${{ parameters.runPREfast }}

    # This is a temporarily workaround to avoid getting non-fatal "folder C:\__t\NativeCompilerPrefast not found"
    # errors from the Guardian PREfast task, which shouldn't even be run in the first place, because its pre-
    # requisite of isNative=true isn't met currently.
    - script: |
        md "C:\__t\NativeCompilerPrefast"
      displayName: 'Creating C:\__t\NativeCompilerPrefast to prevent errors from Guardian PREfast'

  - job: BuildMRT
    pool:
      # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
      ${{ if parameters.IsOneBranch }}:
        type: windows
      ${{ if not( parameters.IsOneBranch ) }}:
        type: windows
        isCustom: true
        name: 'ProjectReunionESPool-2022'
    timeoutInMinutes: 120
    strategy:
      maxParallel: 10
      matrix:
        ${{ format('Release_{0}', parameters.buildPlatform) }}:
          ${{ if ne(parameters.buildPlatform, 'arm64') }}:
            buildPlatform: ${{ parameters.buildPlatform }}
            buildConfiguration: 'Release'
            normalizedConfiguration: 'fre'
            PGOBuildMode: 'Optimize'
          ${{ else }}:
            buildPlatform: ${{ parameters.buildPlatform }}
            buildConfiguration: 'Release'
            normalizedConfiguration: 'fre'
    variables:
      - name: ob_outputDirectory
        value: '$(REPOROOT)\out'
      - name: ob_sdl_codeSignValidation_excludes
        value: '-|**\Release\**'
      - name: ob_sdl_suppression_suppressionSet
        value: default
      - name: ob_artifactBaseName
        value: "MrtBinaries_$(buildConfiguration)_$(buildPlatform)"
      - name: ob_sdl_apiscan_enabled
        ${{ if parameters.runApiScan }}:
          value: true
        ${{ else }}:
          value: false
      - name: ob_sdl_apiscan_softwareFolder
        value: '$(build.SourcesDirectory)\APIScanTarget'
      - name: ob_sdl_apiscan_symbolsFolder
        value: '$(build.SourcesDirectory)\APIScanTarget;SRV*https://symweb.azurefd.net'
      - template: AzurePipelinesTemplates/WindowsAppSDK-Global-LKGVersions.yml@WindowsAppSDKConfigSourceBranch
      - name: localCompilerOverridePackageName
        value: $[coalesce(variables.compilerOverridePackageName, variables.global_CompilerOverridePackageName)]
      - name: localCompilerOverridePackageVersion
        value: $[coalesce(variables.compilerOverridePackageVersion, variables.global_CompilerOverridePackageVersion)]
      - name: localCompilerOverrideNupkgVersion
        value: $[coalesce(variables.compilerOverrideNupkgVersion, variables.global_CompilerOverrideNupkgVersion)]    
    steps:
    - script: |
        echo Build.SourceBranch=$(Build.SourceBranch)
        echo Build.Reason=$(Build.Reason)
        echo compilerOverridePackageName=$(compilerOverridePackageName)
        echo compilerOverridePackageVersion=$(compilerOverridePackageVersion)
        echo global_CompilerOverridePackageName=$(global_CompilerOverridePackageName)
        echo global_CompilerOverridePackageVersion=$(global_CompilerOverridePackageVersion)
        echo localCompilerOverridePackageName=$(localCompilerOverridePackageName)
        echo localCompilerOverridePackageVersion=$(localCompilerOverridePackageVersion)
        echo localCompilerOverrideNupkgVersion=$(localCompilerOverrideNupkgVersion)
        echo System.PullRequest.targetBranchName=$(System.PullRequest.targetBranchName)
        echo mySourceBranch=$(mySourceBranch)        

    - template: WindowsAppSDK-BuildMRT-Steps.yml@self
      parameters:
        SignOutput: ${{ parameters.SignOutput }}
        IsOneBranch: ${{ parameters.IsOneBranch }}
        runPREfast : ${{ parameters.runPREfast }}
        runApiScan : ${{ parameters.runApiScan }}

    # This is a temporarily workaround to avoid getting non-fatal "folder C:\__t\NativeCompilerPrefast not found"
    # errors from the Guardian PREfast task, which shouldn't even be run in the first place, because its pre-
    # requisite of isNative=true isn't met currently.
    - script: |
        md "C:\__t\NativeCompilerPrefast"
      displayName: 'Creating C:\__t\NativeCompilerPrefast to prevent errors from Guardian PREfast'