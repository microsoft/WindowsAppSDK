parameters:
- name: "SignOutput"
  type: boolean
  default: false
- name: "IsOneBranch"
  type: boolean
  default: true
- name: runStaticAnalysis
  type: boolean
  default: true

steps:
- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: 'TelemetryInternal'

- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: 'NuGet restore of packages'
  inputs:
    command: 'custom'
    arguments: 'restore dev\WindowsAppRuntime_Insights\packages.config -ConfigFile NuGet.config -PackagesDirectory dev\WindowsAppRuntime_Insights\packages'

- template: WindowsAppSDK-SetupBuildEnvironment-Steps.yml
  parameters:
    IsOneBranch: ${{ parameters.IsOneBranch }}

- task: PowerShell@2
  name: BuildFoundation
  inputs:
    filePath: 'BuildAll.ps1'
    arguments: -AzureBuildStep "BuildAnyCPU"

- ${{ if eq(parameters.runStaticAnalysis, 'true') }}:
  - task: SDLNativeRules@3
    displayName: Run PREfast SDL Native Rules
    inputs:
      setupCommandlines: '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsMSBuildCmd.bat"'
      msBuildCommandline: 'msbuild.exe /restore /nologo /nr:false $(Build.SourcesDirectory)\dev\Bootstrap\CS\Microsoft.WindowsAppRuntime.Bootstrap.Net\Microsoft.WindowsAppRuntime.Bootstrap.Net.csproj'
      # Generally speaking, we leave it to the external repos to scan the bits in their packages.
      excludedPaths: |
        $(Build.SourcesDirectory)\packages
    continueOnError: true
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)

# component detection must happen *within* the build task
- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0

- task: ComponentGovernanceComponentDetection@0
  inputs:
    scanType: 'Register'
    verbosity: 'Verbose'
    alertWarningLevel: 'Medium'
    failOnAlert: true

- ${{ if eq(parameters.SignOutput, 'true') }}:
  - template: AzurePipelinesTemplates/WindowsAppSDK-EsrpCodeSigning-Steps.yml@WindowsAppSDKConfig
    parameters:
      FolderPath: '$(build.SourcesDirectory)\BuildOutput'
      UseMinimatch: true
      Pattern: |
        **/*.winmd
        **/*.dll
        **/*.exe
      KeyCode: 'CP-230012'
      displayName: 'Authenticode CodeSign Binaries'

# Artifacts are uploaded via ob_outputDirectory where the each vPack Push jobs downloads from
# so the CopyFiles below are to move all the vPack files to the right locations
- task: CopyFiles@2
  displayName: MoveToOutputDirectory
  inputs:
    SourceFolder: '$(build.SourcesDirectory)\BuildOutput'
    TargetFolder: '$(ob_outputDirectory)'

- ${{ if not( parameters.IsOneBranch ) }}:
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(ob_outputDirectory)'
      artifactName: '$(ob_artifactBaseName)'