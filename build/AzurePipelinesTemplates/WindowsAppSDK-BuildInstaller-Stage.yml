# This Installer Stage is purely for validation
# The actual installer is built with the Aggregator build
stages:
- stage: Installer
  dependsOn: []
  jobs:
  - job: BuildInstaller
    dependsOn: []
    pool:
      type: windows
      isCustom: true
      name: 'ProjectReunionESPool-2022' # This stage is purely for validation
    strategy:
      maxParallel: 10
      matrix:
        Release_x86:
          buildPlatform: 'x86'
          buildConfiguration: 'Release'
        Release_x64:
          buildPlatform: 'x64'
          buildConfiguration: 'Release'
        Release_arm64:
          buildPlatform: 'arm64'
          buildConfiguration: 'Release'
    variables:
      - name: ob_outputDirectory
        value: '$(REPOROOT)\out'
      - name: ob_artifactSuffix
        value: '_$(buildConfiguration)_$(buildPlatform)'
      - name: ob_artifactBaseName
        value: "Installer$(ob_artifactSuffix)"
      # foundationRepoPath should be empty because we are not doing multiple checkouts hence
      # it is not under $(Build.SourcesDirectory)\WindowsAppSDK
      - name: foundationRepoPath
        value: ""
      - ${{ if contains(variables['Build.SourceBranch'], 'user') }}:
        # If this pipeline run is targetting a developer's private branch, most of the time there is no
        # corresponding private branch on the Agg repo. Therefore, by default, map to the Main branch on
        # the Agg repo to avoid a "file not found" error. 
        # In the uncommon case that the developer means to target the corresponding private branch on the
        # Agg repo, change WindowsAppSDKAggregatorMainBranch to WindowsAppSDKAggregatorSourceBranch below.
        - template: build/AzurePipelinesTemplates/WindowsAppSDK-Global-LKGVersions.yml@WindowsAppSDKAggregatorMainBranch
      - ${{ elseif and(startsWith(variables['Build.SourceBranch'], 'refs/heads/release'), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/release-1.7'))) }}:    
        # If this pipeline run is targetting a servicing branch which is new enough (1.8+), then we expect
        # the file WindowsAppSDK-Global-LKGVersions.yml to exists on the Agg repo in the corresponding 
        # branch, so target the corresponding branch on the Agg repo.
        - template: build/AzurePipelinesTemplates/WindowsAppSDK-Global-LKGVersions.yml@WindowsAppSDKAggregatorSourceBranch
      - ${{ else }}:
        # If this pipeline run is targetting the Main branch, a Pull Request branch (e.g., refs/pull/12460423/merge),
        # or some other unexpected branch, target the Main branch on the Agg repo by default.
        - template: build/AzurePipelinesTemplates/WindowsAppSDK-Global-LKGVersions.yml@WindowsAppSDKAggregatorMainBranch
      - name: localCompilerOverridePackageName
        value: $[coalesce(variables.compilerOverridePackageName, variables.global_CompilerOverridePackageName)]
      - name: localCompilerOverridePackageVersion
        value: $[coalesce(variables.compilerOverridePackageVersion, variables.global_CompilerOverridePackageVersion)]
    condition: ne(variables.LatestOfficialBuildID, '')
    steps:
    # In case we picked the wrong branch for the Agg repo in the variables section above, this helps diagnose that problem.
    - script: |
        echo Build.SourceBranch=$(Build.SourceBranch)
        echo compilerOverridePackageName=$(compilerOverridePackageName)
        echo compilerOverridePackageVersion=$(compilerOverridePackageVersion)
        echo global_CompilerOverridePackageName=$(global_CompilerOverridePackageName)
        echo global_CompilerOverridePackageVersion=$(global_CompilerOverridePackageVersion)
        echo localCompilerOverridePackageName=$(localCompilerOverridePackageName)
        echo localCompilerOverridePackageVersion=$(localCompilerOverridePackageVersion)

    - template: WindowsAppSDK-BuildInstaller-Steps.yml@self
