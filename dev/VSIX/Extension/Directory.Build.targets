<?xml version="1.0" encoding="utf-8"?>
<Project>
  <Import Project="..\Directory.Build.targets" Condition="Exists('..\Directory.Build.targets')"/>

  <!--
    VSIX manifest version does not support semver, only .Net type version numbers, so we
    need to trim the Nuget package's version number. It is then suffixed with the number of
    seconds since 2020-01-01T00:00Z to provide a monotonically increasing (mostly) unique
    version number for the VSIX†. This versioning scheme is only used by builds inside
    Visual Studio; the official build pipeline enforces its own versioning.

    † Note: Yes, this introduces a Year 2088 problem for the locally-built VSIX because the
    final component of the version number can wrap around after 68 years. No, this is not
    a concern because it seems unlikely that we'll go 68 years without resetting the clock
    by increasing the Windows App SDK version number.
  -->
  <PropertyGroup Condition="'$(VSIXVersion)' == '' AND '$(OptionalVSIXVersion)'!='default' AND '$(OptionalVSIXVersion)'!=''">
    <!-- Optional VSIX version is provided by the pipeline definition to override package version -->
    <VSIXVersion>$(OptionalVSIXVersion)</VSIXVersion>
  </PropertyGroup>
  <PropertyGroup Condition="'$(VSIXVersion)' == ''">
    <!-- Use 3-part Windows App SDK version, less any tagging suffix -->
    <!-- 
      WindowsAppSDK release versions now have a timestamp as part of the patch
      and a revision count making very release versions unique. This avoids
      version sequencing issues between experimental and stable/preview versions
      that might otherwise have the same version number, since VSIX does not
      support preview tags or other mechanisms to distinguish.
    -->
    <VSIXVersion>$(WindowsAppSDKVersion)</VSIXVersion>
    <VSIXVersion Condition="$(VSIXVersion.Contains(&quot;-&quot;))">$(VSIXVersion.Substring(0, $(VSIXVersion.IndexOf("-"))))</VSIXVersion>
  </PropertyGroup>

  <Target Name="GetVSIXVersion" Outputs="$(VSIXVersion)" />

  <Target Name="AfterBuild">
    <PropertyGroup>
      <BinRoot Condition="$(BinRoot) == ''">$(OutputPath)</BinRoot>
    </PropertyGroup>
    <Message Importance="high" Text="Binplacing to: $(BinRoot)" />
    <Copy SkipUnchangedFiles="true" SourceFiles="$(TargetVsixContainer)" DestinationFolder="$(BinRoot)"/>
	<Move Condition="'$(JsonName)' != '' AND Exists('$(BaseIntermediateOutputPath)\$(JsonName)')" SourceFiles="$(BaseIntermediateOutputPath)\$(JsonName)" DestinationFiles="$(BaseIntermediateOutputPath)\$(AssemblyName).$(Deployment).json"/>
  </Target>


  <!--
      These targets are used to make build-time updates to the contents of the VSIX;
      currently the .vsixmanifest and all .vstemplate files are modified. They operate
      against the

      Concrete example:
      Originally, it looks like this (notice the "FIXME-Verify-Directory.Build.Targets-XmlPoke-Queries"):

        <WizardData>
          <MinSupportedVersion>10.0.17763.0</MinSupportedVersion>
          <packages repository="extension" repositoryId="Microsoft.WindowsAppSDK">
              <package id="Microsoft.Windows.CppWinRT" version="FIXME-Verify-Directory.Build.Targets-XmlPoke-Queries" />
              <package id="Microsoft.WindowsAppSDK" version="FIXME-Verify-Directory.Build.Targets-XmlPoke-Queries" />
              (other WindowsAppSDK packages...)
          </packages>
      </WizardData>

      Then, XmlPoke changes it to the real version of the package we embed in the VSIX, like this:

        <WizardData>
          <MinSupportedVersion>10.0.17763.0</MinSupportedVersion>
          <packages repository="extension" repositoryId="Microsoft.WindowsAppSDK">
              <package id="Microsoft.Windows.CppWinRT" version="2.0.190730.2" />
              <package id="Microsoft.WindowsAppSDK" version="3.0.190925000-prerelease" />
              (other WindowsAppSDK packages...)
          </packages>
      </WizardData>
  -->

  <PropertyGroup>
    <_RewriteVsixContentsDependsOn>
      $(_RewriteVsixContentsDependsOn);
      EnsureGeneratedFilesDir;
      GetVsixSourceItems;
      _PrepareVsixManifestRewrite;
      _RewriteVsixManifest;
      _CollectVsTemplateArchives;
      _RewriteVsTemplates
    </_RewriteVsixContentsDependsOn>
    <RewriteVsixSourceItemsUpToDateMarker>$(IntermediateOutputPath)vsixsourceitemsrewritten.marker</RewriteVsixSourceItemsUpToDateMarker>
  </PropertyGroup>

  <Target Name="RewriteVsixSourceItems"
    Inputs="@(VSIXSourceItem);$(IntermediateVsixManifest)"
    Outputs="$(RewriteVsixSourceItemsUpToDateMarker)"
    AfterTargets="GetVsixSourceItems"
    BeforeTargets="GenerateFileManifest;GenerateTemplatesManifest;CreateVsixContainer"
    DependsOnTargets="$(_RewriteVsixContentsDependsOn)">

    <Touch Files="$(RewriteVsixSourceItemsUpToDateMarker)" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <Target Name="EnsureGeneratedFilesDir">
    <PropertyGroup>
      <GeneratedFilesDir>$(IntermediateOutputPath)generated\</GeneratedFilesDir>
    </PropertyGroup>

    <MakeDir Directories="$(GeneratedFilesDir)" />
  </Target>

  <Target Name="_PrepareVsixManifestRewrite">
    <!-- Calculate new values to be used in `_RewriteVsixManifest` -->

    <XmlPeek
      XmlInputPath="$(IntermediateVsixManifest)"
      Query="/ns:PackageManifest/ns:Metadata/ns:Identity/@Id"
      Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/developer/vsx-schema/2011' /&gt;">
      <Output TaskParameter="Result" PropertyName="_OriginalVsixId" />
    </XmlPeek>
    <XmlPeek
      XmlInputPath="$(IntermediateVsixManifest)"
      Query="/ns:PackageManifest/ns:Metadata/ns:DisplayName/text()"
      Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/developer/vsx-schema/2011' /&gt;">
      <Output TaskParameter="Result" PropertyName="_OriginalVsixName" />
    </XmlPeek>
    <XmlPeek
      XmlInputPath="$(IntermediateVsixManifest)"
      Query="/ns:PackageManifest/ns:Metadata/ns:Tags/text()"
      Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/developer/vsx-schema/2011' /&gt;">
      <Output TaskParameter="Result" PropertyName="_OriginalVsixTags" />
    </XmlPeek>

    <PropertyGroup>
      <VsixIdentity>$(_OriginalVsixId)</VsixIdentity>
      <ExperimentalVsixIdentity>$(_OriginalVsixId).Experimental</ExperimentalVsixIdentity>
      <ExperimentalVsixDisplayName>Experimental $(_OriginalVsixName)</ExperimentalVsixDisplayName>
      <ExperimentalVsixTags>$(_OriginalVsixTags)</ExperimentalVsixTags>

      <_OriginalVsixId></_OriginalVsixId>
      <_OriginalVsixName></_OriginalVsixName>
      <_OriginalVsixTags></_OriginalVsixTags>
    </PropertyGroup>
  </Target>

  <Target Name="_RewriteVsixManifest"
    DependsOnTargets="_PrepareVsixManifestRewrite">
    <!-- Update the .vsixmanifest to reflect experimental status if necessary -->
    <XmlPoke
      Condition="'$(EnableExperimentalVSIXFeatures)'=='true'"
      XmlInputPath="$(IntermediateVsixManifest)"
      Query="/ns:PackageManifest/ns:Metadata/ns:Identity/@Id"
      Value="$(ExperimentalVsixIdentity)"
      Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/developer/vsx-schema/2011' /&gt;" />
    <XmlPoke
      Condition="'$(EnableExperimentalVSIXFeatures)'=='true'"
      XmlInputPath="$(IntermediateVsixManifest)"
      Query="/ns:PackageManifest/ns:Metadata/ns:DisplayName"
      Value="$(ExperimentalVsixDisplayName)"
      Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/developer/vsx-schema/2011' /&gt;" />
    <XmlPoke
      Condition="'$(EnableExperimentalVSIXFeatures)'=='true'"
      XmlInputPath="$(IntermediateVsixManifest)"
      Query="/ns:PackageManifest/ns:Metadata/ns:Tags"
      Value="$(ExperimentalVsixTags)"
      Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/developer/vsx-schema/2011' /&gt;" />
    <XmlPoke
      Condition="'$(EnableExperimentalVSIXFeatures)'=='true'"
      XmlInputPath="$(IntermediateVsixManifest)"
      Query="/ns:PackageManifest/ns:Metadata/ns:Preview"
      Value="true"
      Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/developer/vsx-schema/2011' /&gt;" />
  </Target>

  <Target Name="_CollectVsTemplateArchives"
    AfterTargets="GetVsixSourceItems">
    <!-- Templates are packed into ZIP archives before being later unzipped and added to the
         VSIX source items manifest; the archives are also used to generate the template manifests.
         We need to modify the archives' contents before they are used to generate the template
         manifests in order for our changes to be picked up. -->
    <ItemGroup>
      <VsTemplateArchives Include="@(VSIXSourceItem)" Condition="'%(VSIXSourceItem.Extension)' == '.zip'" />
    </ItemGroup>
  </Target>

  <Target Name="_RewriteVsTemplates"
    Inputs="@(VsTemplateArchives);$(IntermediateVsixManifest)"
    Outputs="$(GeneratedFilesDir)%(Filename)%(Extension)"
    DependsOnTargets="_PrepareVsixManifestRewrite;_CollectVsTemplateArchives"
    Condition="'@(VsTemplateArchives)' != ''">

    <PropertyGroup>
      <!-- The repository ID must match the VSIX identity -->
      <NugetRepositoryId Condition="'$(EnableExperimentalVSIXFeatures)'!='true'">$(VsixIdentity)</NugetRepositoryId>
      <NugetRepositoryId Condition="'$(EnableExperimentalVSIXFeatures)'=='true'">$(ExperimentalVsixIdentity)</NugetRepositoryId>
    </PropertyGroup>

    <PropertyGroup>
      <_tempDir>$(GeneratedFilesDir)%(VsTemplateArchives.Filename)\</_tempDir>
    </PropertyGroup>

    <!--
      Unzip the archive
      We specify the full name of the built-in MSBuild Unzip task to avoid conflicting with
      VSSDK's own 'Unzip' task which, despite its name, is actually unable to extract generic
      ZIP archives due to internal use of the System.IO.Packaging API
      (all System.IO.Packaging.ZipPackage are ZIP archives, but not all ZIP archives are
      ZipPackages).
    -->
    <RemoveDir Directories="$(_tempDir)" />
    <Microsoft.Build.Tasks.Unzip SourceFiles="%(VsTemplateArchives.FullPath)"
      DestinationFolder="$(_tempDir)" />

    <ItemGroup>
      <_allVsTemplates Include="$(_tempDir)**\*.vstemplate" />
    </ItemGroup>

    <PropertyGroup>
      <!-- XSL transform that we want to always run against .vstemplates -->
      <_UnconditionalVsTemplateXslt>
            <![CDATA[
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://schemas.microsoft.com/developer/vstemplate/2005">
    <!-- Identity template to copy everything by default -->
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>

    <!-- Update the Package GUID in the Name and Description metadata -->
    <xsl:template match="/ns:VSTemplate/ns:TemplateData/ns:Name/@Package">
        <xsl:attribute name="Package">$(PackageGuidString)</xsl:attribute>
    </xsl:template>
    <xsl:template match="/ns:VSTemplate/ns:TemplateData/ns:Description/@Package">
        <xsl:attribute name="Package">$(PackageGuidString)</xsl:attribute>
    </xsl:template>

    <!-- Update custom parameters passed into subtemplates -->
    <xsl:template match="/ns:VSTemplate/ns:TemplateContent/ns:CustomParameters/ns:CustomParameter[@Name='$CppWinRTVersion$']/@Value">
        <xsl:attribute name="Value">$(CppWinRTVersion)</xsl:attribute>
    </xsl:template>
    <xsl:template match="/ns:VSTemplate/ns:TemplateContent/ns:CustomParameters/ns:CustomParameter[@Name='$WindowsAppSDKNupkgVersion$']/@Value">
        <xsl:attribute name="Value">$(WindowsAppSDKVersion)</xsl:attribute>
    </xsl:template>
    <xsl:template match="/ns:VSTemplate/ns:TemplateContent/ns:CustomParameters/ns:CustomParameter[@Name='$WindowsSDKBuildToolsNupkgVersion$']/@Value">
        <xsl:attribute name="Value">$(WindowsSDKBuildToolsVersion)</xsl:attribute>
    </xsl:template>
    <xsl:template match="/ns:VSTemplate/ns:TemplateContent/ns:CustomParameters/ns:CustomParameter[@Name='$WILVersion$']/@Value">
        <xsl:attribute name="Value">$(WILVersion)</xsl:attribute>
    </xsl:template>
    <xsl:template match="/ns:VSTemplate/ns:TemplateContent/ns:CustomParameters/ns:CustomParameter[@Name='$DotNetVersion$']/@Value">
        <xsl:attribute name="Value">$(DotNetVersion)</xsl:attribute>
    </xsl:template>
</xsl:stylesheet>
      ]]></_UnconditionalVsTemplateXslt>

      <!-- XSL transform that we only run against .vstemplates when building an experimental VSIX -->
      <_ExperimentalVsTemplateXslt><![CDATA[
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://schemas.microsoft.com/developer/vstemplate/2005">
    <!-- Identity template to copy everything by default -->
    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>

    <!--
        By convention, the IDs of the experimental versions of our
        string resources are even numbers (normal versions are odd). Add '1'
        to the default value in the .vstemplate to switch to the experimental
        string resource for the Name metadata.
    -->
    <xsl:template match="/ns:VSTemplate/ns:TemplateData/ns:Name/@ID">
        <xsl:attribute name="ID">
            <xsl:value-of select=". + 1" />
        </xsl:attribute>
    </xsl:template>

    <!-- Use experimental TemplateID -->
    <xsl:template match="/ns:VSTemplate/ns:TemplateData/ns:TemplateID/text()">
        <xsl:value-of select="concat(., '.Experimental')" />
    </xsl:template>
</xsl:stylesheet>
      ]]></_ExperimentalVsTemplateXslt>
    </PropertyGroup>

    <!-- Run the XSL transformations! -->
    <XslTransformation
      XmlInputPaths="@(_allVsTemplates)"
      OutputPaths="@(_allVsTemplates->'$(_tempDir)%(RecursiveDir)%(Filename)%(Extension).generated')"
      XslContent="$(_UnconditionalVsTemplateXslt)" />
    <!-- Replace the original .vstemplate -->
    <Move SourceFiles="@(_allVsTemplates->'$(_tempDir)%(RecursiveDir)%(Filename)%(Extension).generated')"
      DestinationFiles="@(_allVsTemplates->'$(_tempDir)%(RecursiveDir)%(Filename)%(Extension)')" />

    <XslTransformation
      Condition="'$(EnableExperimentalVSIXFeatures)'=='true'"
      XmlInputPaths="@(_allVsTemplates)"
      OutputPaths="@(_allVsTemplates->'$(_tempDir)%(RecursiveDir)%(Filename)%(Extension).generated')"
      XslContent="$(_ExperimentalVsTemplateXslt)" />
    <!-- Replace the original .vstemplate -->
    <Move Condition="'$(EnableExperimentalVSIXFeatures)'=='true'"
      SourceFiles="@(_allVsTemplates->'$(_tempDir)%(RecursiveDir)%(Filename)%(Extension).generated')"
      DestinationFiles="@(_allVsTemplates->'$(_tempDir)%(RecursiveDir)%(Filename)%(Extension)')" />

    <!-- Repack the archive -->
    <ZipDirectory SourceDirectory="$(_tempDir)"
      DestinationFile="$(GeneratedFilesDir)%(VsTemplateArchives.Filename)%(VsTemplateArchives.Extension)"
      Overwrite="true" />

    <!-- Replace the original item from @(VsixSourceItem) with the newly generated archive -->
    <ItemGroup>
      <VsTemplateArchives Condition="'%(VsTemplateArchives.Identity)' == '%(Identity)'">
        <ZipFile>$(GeneratedFilesDir)%(VsTemplateArchives.Filename)%(VsTemplateArchives.Extension)</ZipFile>
      </VsTemplateArchives>
      <VsixSourceItem Remove="%(VsTemplateArchives.Identity)" />
      <VsixSourceItem Include="@(VsTemplateArchives->'%(ZipFile)')" />
    </ItemGroup>

    <!-- Clear properties/item groups to prevent clobbering during batching -->
    <ItemGroup>
      <_allVsTemplates Remove="@(_allVsTemplates)" />
      <FileWrites Include="$(_tempDir)**\*" />
      <FileWrites Include="$(GeneratedFilesDir)%(VsTemplateArchives.Filename)%(VsTemplateArchives.Extension)" />
    </ItemGroup>
  </Target>

</Project>