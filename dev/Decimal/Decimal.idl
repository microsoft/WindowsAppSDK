// Copyright (c) Microsoft Corporation and Contributors.
// Licensed under the MIT License.

#include <TerminalVelocityFeatures-Decimal.h>

namespace Microsoft.Windows.Foundation
{
    [contractversion(1)]
    apicontract DecimalContract{};

    /// WinRT representation of the Win32 DECIMAL structure.
    /// @note This is the identical memory layout and encoding of the Win32 DECIMAL structure.
    ///       The latter's definition is valid for COM but not WinRT making this equivalent structure necessary.
    /// @see https://learn.microsoft.com/windows/win32/api/wtypes/ns-wtypes-decimal-r1
    [feature(Feature_Decimal)]
    [contract(DecimalContract, 1)]
    struct DecimalValue
    {
        UInt16 Reserved;
        UInt8 Scale;        // Allowed values: 0-28
        UInt8 Sign;         // Allowed values: 0x80 = negative, 0x00 = zero or positive
        UInt32 Hi32;
        UInt64 Lo64;
    };

    [feature(Feature_Decimal)]
    [contract(DecimalContract, 1)]
    runtimeclass DecimalHelper
    {
        static DecimalValue FromBoolean(Boolean value);
        static DecimalValue FromInt16(Int16 value);
        static DecimalValue FromInt32(Int32 value);
        static DecimalValue FromInt64(Int64 value);
        static DecimalValue FromUInt8(UInt8 value);
        static DecimalValue FromUInt16(UInt16 value);
        static DecimalValue FromUInt32(UInt32 value);
        static DecimalValue FromUInt64(UInt64 value);
        static DecimalValue FromSingle(Single value);
        static DecimalValue FromDouble(Double value);

        /// Parse the string using the user's default locale.
        static DecimalValue FromString(String source);

        /// Parse the string using the invariant locale.
        static DecimalValue FromStringInvariant(String source);

        /// Parse the string using the specified locale.
        [method_name("FromStringWithLocale")]
        static DecimalValue FromString(String source, String localeName);

        /// Parse the string using the user's default locale.
        static Boolean TryFromString(String source, out DecimalValue value);

        /// Parse the string using the invariant locale.
        static Boolean TryFromStringInvariant(String source, out DecimalValue value);

        /// Parse the string using the specified locale.
        [method_name("TryFromStringWithLocale")]
        static Boolean TryFromString(String source, String localeName, out DecimalValue value);

        static Boolean ToBoolean(DecimalValue value);
        static Int16 ToInt16(DecimalValue value);
        static Int32 ToInt32(DecimalValue value);
        static Int64 ToInt64(DecimalValue value);
        static UInt8 ToUInt8(DecimalValue value);
        static UInt16 ToUInt16(DecimalValue value);
        static UInt32 ToUInt32(DecimalValue value);
        static UInt64 ToUInt64(DecimalValue value);
        static Single ToSingle(DecimalValue value);
        static Double ToDouble(DecimalValue value);

        /// Format the string using the user's default locale.
        static String ToString(DecimalValue value);

        /// Format the string using the invariant locale.
        static String ToStringInvariant(DecimalValue value);

        /// Format the string using the specified locale.
        [method_name("ToStringWithLocale")]
        static String ToString(DecimalValue value, String localeName);

        /// Return true if (left == right).
        static Boolean Equals(DecimalValue left, DecimalValue right);

        /// Compare decimal values.
        /// @return 0 if left and right are equal, <0 if left is less than right or >0 if left is greater than right.
        static Int32 Compare(DecimalValue left, DecimalValue right);

        /// Return true if the value is valid.
        static Boolean IsValid(DecimalValue value);

        /// Return true if value is an integral number.
        static Boolean IsInteger(DecimalValue value);

        /// Return the scaling factor of the value (the number of decimal digits).
        /// @return the scaling factor, ranging from 0 to max_scale().
        static UInt8 Scale(DecimalValue value);

        /// Return the sign of the value.
        /// @return 0 if value is zero, <0 if value is less than zero or >0 if value is greater than zero.
        static Int32 Sign(DecimalValue value);

        /// Return the maximum scaling factor
        static UInt8 MaxScale();

        /// Return the maximum value (79,228,162,514,264,337,593,543,950,335).
        static DecimalValue MaxValue();

        /// Return the minimum value (-79,228,162,514,264,337,593,543,950,335).
        static DecimalValue MinValue();

        /// Return a decimal whose value is (-value).
        static DecimalValue Negate(DecimalValue value);

        /// Return the absolute value.
        static DecimalValue Abs(DecimalValue value);

        /// Return the integral digits; any fractional digits are discarded.
        static DecimalValue Truncate(DecimalValue value);

        /// Return the integral digits rounded down to -infinity; any fractional digits are discarded.
        static DecimalValue Floor(DecimalValue value);

        /// Return the integral digits rounded up to +infinity; any fractional digits are discarded.
        static DecimalValue Ceiling(DecimalValue value);

        /// Return the value rounded to the specific number of decimal places.
        static DecimalValue Round(DecimalValue value, Int32 decimalPlaces);

        /// Return value clamped to the inclusive range of min and max.
        /// @return value if min <= value <= max, or min if value < min, or max if max < value.
        static DecimalValue Clamp(DecimalValue value, DecimalValue min, DecimalValue max);

        /// Returns a DecimalValue whose value is (left + right).
        static DecimalValue Add(DecimalValue left, DecimalValue right);

        /// Returns a DecimalValue whose value is (left - right).
        static DecimalValue Subtract(DecimalValue left, DecimalValue right);

        /// Returns a DecimalValue whose value is (left * right).
        static DecimalValue Multiply(DecimalValue left, DecimalValue right);

        /// Returns a DecimalValue whose value is (left / right).
        static DecimalValue Divide(DecimalValue left, DecimalValue right);

        /// Returns a DecimalValue whose value is (left % right).
        static DecimalValue Modulo(DecimalValue left, DecimalValue right);
    }
}
