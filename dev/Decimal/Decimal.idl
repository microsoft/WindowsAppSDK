// Copyright (c) Microsoft Corporation and Contributors.
// Licensed under the MIT License.

#include <TerminalVelocityFeatures-Decimal.h>

namespace Microsoft.Windows.Foundation
{
    [contractversion(2)]
    apicontract DecimalContract{};

    [feature(Feature_Decimal)]
    [contract(DecimalContract, 1)]
    struct DecimalValue
    {
        UInt16 Reserved;
        UInt8 Scale;
        UInt8 Sign;
        UInt32 Hi32;
        UInt64 Lo64;
    };

    [feature(Feature_Decimal)]
    [contract(DecimalContract, 1)]
    runtimeclass Decimal : Windows.Foundation.IStringable
    {
        Decimal();

        static Decimal CreateFromBoolean(Boolean value);
        static Decimal CreateFromInt16(Int16 value);
        static Decimal CreateFromInt32(Int32 value);
        static Decimal CreateFromInt64(Int64 value);
        static Decimal CreateFromUInt8(UInt8 value);
        static Decimal CreateFromUInt16(UInt16 value);
        static Decimal CreateFromUInt32(UInt32 value);
        static Decimal CreateFromUInt64(UInt64 value);
        static Decimal CreateFromSingle(Single value);
        static Decimal CreateFromDouble(Double value);
        static Decimal CreateFromString(String value);                          // LCID=LOCALE_INVARIANT
        static Decimal CreateFromStringWithSystemDefaultLocale(String value);   // LCID=GetSystemDefaultLCID()
        static Decimal CreateFromStringWithUserDefaultLocale(String value);     // LCID=GetUserDefaultLCID()
        static Decimal CreateFromStringWithThreadLocale(String value);          // LCID=GetThreadLocale()
        static Decimal CreateFromStringWithInvariantLocale(String value);       // LCID=LOCALE_INVARIANT
        static Decimal Create(IInspectable value);
        static Decimal CreateFromDecimal(Decimal value);
        static Decimal CreateFromDecimalValue(DecimalValue value);

        void SetFromBoolean(Boolean value);
        void SetFromInt16(Int16 value);
        void SetFromInt32(Int32 value);
        void SetFromInt64(Int64 value);
        void SetFromUInt8(UInt8 value);
        void SetFromUInt16(UInt16 value);
        void SetFromUInt32(UInt32 value);
        void SetFromUInt64(UInt64 value);
        void SetFromSingle(Single value);
        void SetFromDouble(Double value);
        void SetFromString(String value);                           // LCID=LOCALE_INVARIANT
        void SetFromStringWithSystemDefaultLocale(String value);    // LCID=GetSystemDefaultLCID()
        void SetFromStringWithUserDefaultLocale(String value);      // LCID=GetUserDefaultLCID()
        void SetFromStringWithThreadLocale(String value);           // LCID=GetThreadLocale()
        void SetFromStringWithInvariantLocale(String value);        // LCID=LOCALE_INVARIANT
        void Set(IInspectable value);
        void SetFromDecimal(Decimal value);
        void SetFromDecimalValue(DecimalValue value);

        Boolean ToBoolean();
        Int16 ToInt16();
        Int32 ToInt32();
        Int64 ToInt64();
        UInt8 ToUInt8();
        UInt16 ToUInt16();
        UInt32 ToUInt32();
        UInt64 ToUInt64();
        Single ToSingle();
        Double ToDouble();
        //String ToString(); inherited from IStringable     // LCID=LOCALE_INVARIANT
        String ToStringWithSystemDefaultLocale();           // LCID=GetSystemDefaultLCID()
        String ToStringWithUserDefaultLocale();             // LCID=GetUserDefaultLCID()
        String ToStringWithThreadLocale();                  // LCID=GetThreadLocale()
        String ToStringWithInvariantLocale();               // LCID=LOCALE_INVARIANT
        IInspectable ToObject();
        Decimal ToDecimal();                //TODO: Rename to Copy(value) or Clone(value) ?
        DecimalValue ToDecimalValue();

        /// Return true if (this == value).
        Boolean Equals(Decimal value);

        /// Compare this decimal with value.
        /// @return 0 if this and value are equal, <0 if this is less than value or >0 if this is greater than value.
        Int32 Compare(Decimal value);

        /// Return the scaling factor of the value (the number of decimal digits).
        /// @return the scaling factor, ranging from 0 to max_scale().
        UInt32 Scale { get; };

        /// Return the sign of the value.
        /// @return 0 if this os zero, <0 if this is less than zero or >0 if this is greater than zero.
        Int32 Sign { get; };

        /// Return the maximum scaling factor
        static UInt32 MaxScale{ get; };

        /// Return the maximum value (79,228,162,514,264,337,593,543,950,335).
        static Decimal MaxValue{ get; };

        /// Return the minimum value (-79,228,162,514,264,337,593,543,950,335).
        static Decimal MinValue{ get; };

        /// Return a decimal whose value is (-this).
        Decimal Negate();

        /// Return the absolute value.
        Decimal Abs();

        /// Return the value's integer portion (zero to the right of the decimal point).
        Decimal Fix();

        /// Return the value rounded down to the nearest integer.
        Decimal Integer();

        /// Return the value rounded to the specific number of decimal places.
        Decimal Round(Int32 decimalPlaces);

        /// Returns a Decimal whose value is (this + value).
        Decimal Add(Decimal value);

        /// Returns a Decimal whose value is (this - value).
        Decimal Sub(Decimal value);         //TODO Rename to Subtract() ?

        /// Returns a Decimal whose value is (this * value).
        Decimal Mul(Decimal value);         //TODO Rename to Multiply() ?

        /// Returns a Decimal whose value is (this / value).
        Decimal Div(Decimal value);         //TODO Rename to Divide() ?

        /// Returns a Decimal whose value is (this % value).
        Decimal Mod(Decimal value);         //TODO Rename to Modulo() or Remainder() ?
    }
}
