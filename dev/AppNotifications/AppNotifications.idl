// Copyright (c) Microsoft Corporation and Contributors.
// Licensed under the MIT License.
import "..\AppLifecycle\AppLifecycle.idl";
#include <TerminalVelocityFeatures-CallingPreviewSupport.h>

namespace Microsoft.Windows.AppNotifications
{
    [contractversion(4)]
    apicontract AppNotificationsContract {}

    // Event args for the Notification Activation
    [contract(AppNotificationsContract, 1)]
    runtimeclass AppNotificationActivatedEventArgs
    {
        // Arguments from the invoked button. Empty for Default Activation with no launch args specified in payload.
        String Argument{ get; };

        // The data from the input elements of a Notification like a TextBox
        Windows.Foundation.Collections.IMap<String, String> UserInput{ get; };

        // Arguments from the invoked button built from AppNotificationBuilder
        [contract(AppNotificationsContract, 3)]
        Windows.Foundation.Collections.IMap<String, String> Arguments{ get; };
    }

    // Notification Progress Data
    [contract(AppNotificationsContract, 1)]
    runtimeclass AppNotificationProgressData
    {
        // Initializes a new Instance of NotificationProgressData
        // The sequence number is non-zero or this will throw.
        AppNotificationProgressData(UInt32 sequenceNumber);

        // Gets or sets a non-zero sequence number of this notification data.
        // When multiple NotificationProgressData objects are received, the system displays the data with the greatest non-zero number.
        UInt32 SequenceNumber;

        // Gets/Sets the value for the title. Binds to {progressTitle} in progress xml tag.
        String Title;

        // Gets/Sets the Value for the numerical Progress percentile: a number between 0 and 1. Binds to {progressValue} in progress xml tag.
        Double Value;

        // Gets/Sets the Value for the Progress String. Binds to {progressValueString} in progress xml tag
        String ValueStringOverride;

        // Gets/Sets the Value for the Status. Binds to {progressStatus} in progress xml tag
        String Status;
    }

    // The Notification User Setting or Notification Group Policy Setting
    [contract(AppNotificationsContract, 1)]
    enum AppNotificationSetting
    {
        Enabled, // Notification is not blocked by settings or group policy
        DisabledForApplication, // Notification is blocked by a user defined App Setting
        DisabledForUser, // Notification is blocked by a user defined Global Setting
        DisabledByGroupPolicy, // Notification is blocked by Group Policy
        DisabledByManifest, // Notification is blocked by a setting in the manifest. Only for packaged applications.
        [contract(AppNotificationsContract, 2)]
        Unsupported, // The current operation was called when AppNotifications are not supported
    };

    // The Result for a Notification Progress related operation
    [contract(AppNotificationsContract, 1)]
    enum AppNotificationProgressResult
    {
        Succeeded, // The progress operation succeeded
        AppNotificationNotFound, // The progress operation failed to find a Notification to process updates
        [contract(AppNotificationsContract, 2)]
        Unsupported, // The current operation was called when AppNotifications are not supported
    };

    // The Priority of the Notification UI associated with it's popup in the Action Centre
    [contract(AppNotificationsContract, 1)]
    enum AppNotificationPriority
    {
        Default, // The notification should have default behavior in terms of delivery and display priority during connected standby mode.
        High, // The notification should be treated as high priority. For desktop PCs, this means during connected standby mode the incoming notification can turn on the screen for Surface-like devices if it doesn't have a closed lid detected.
    };

    [contract(AppNotificationsContract, 1)]
    runtimeclass AppNotification
    {
        // The notification payload representation in xml
        AppNotification(String payload);

        // Unique identifier used to replace a notification within a group.
        String Tag;

        // Unique identifier for a Notification group in the app
        String Group;

        // A unique identifier for the Notification generated by the platform.
        UInt32 Id { get; };

        // The notification payload representation in XML
        String Payload{ get; };

        // Gets or sets additional information about the Notification progress.
        AppNotificationProgressData Progress;

        // Gets or sets the time after which a Notification should not be displayed.
        Windows.Foundation.DateTime Expiration;

        // Indicates whether the Notification will remain in the Action Center after a reboot.
        Boolean ExpiresOnReboot;

        // Gets or sets the priority for a Notification.
        // Hints on how and at what urgency level a notification should be presented to the user (whether to wake up the screen, etc).
        AppNotificationPriority Priority;

        // Gets or sets whether a Notification's pop-up UI is displayed on the user's screen.
        Boolean SuppressDisplay;

        // Gets or sets the Notification Conferencing Config
        [contract(AppNotificationsContract, 4), feature(Feature_CallingPreviewSupport)]
        AppNotificationConferencingConfig ConferencingConfig;
    }

    // The Notification Conferencing Config
    [contract(AppNotificationsContract, 4), feature(Feature_CallingPreviewSupport)]
    runtimeclass AppNotificationConferencingConfig
    {
        // Initializes a new Instance of AppNotificationConferencingConfig
        AppNotificationConferencingConfig();

        // Checks if Video or Audio Calling is supported
        static Boolean IsCallingPreviewSupported();

        // Gets or sets the Video Device Id
        String VideoDeviceId;

        // Gets or sets the Microphone Device Id
        String AudioInputDeviceId;

        // Gets or sets the Speaker Device Id
        String AudioOutputDeviceId;
    }

    // The manager class which encompasses all App Notification API Functionality
    [contract(AppNotificationsContract, 1)]
    runtimeclass AppNotificationManager
    {
        // Gets a Default instance of a AppNotificationManager
        static AppNotificationManager Default{ get; };

        // Registers an application for Notifications
        // For Packaged apps, the COM server is defined in the manifest. The Process calling Register() and the process defined as the COM server are required to be the same.
        // For Unpackaged apps, the caller process will be registered as the COM server. And assets like displayname and icon will be gleaned from Shell and registered as well.
        void Register();

        // Unpackaged Apps can call this API to register custom displayname and icon for AppNotifications and register themselves as a COM server.
        [contract(AppNotificationsContract, 2)]
        void Register(String displayName, Windows.Foundation.Uri iconUri);

        // Unregisters the COM Service so that a subsequent activation will launch a new process
        void Unregister();

        // Cleans up all Registration related data for toasts. After this, toasts will not work until Register() is called again
        void UnregisterAll();

        // Event handler for Notification Activations
        event Windows.Foundation.TypedEventHandler<AppNotificationManager, AppNotificationActivatedEventArgs> NotificationInvoked;

        // Displays the Notification in Action Center
        void Show(AppNotification notification);

        // Updates the Notification for a Progress related operation using Tag and Group
        Windows.Foundation.IAsyncOperation<AppNotificationProgressResult> UpdateAsync(AppNotificationProgressData data, String tag, String group);

        // Updates the Notification for a Progress related operation using Tag
        Windows.Foundation.IAsyncOperation<AppNotificationProgressResult> UpdateAsync(AppNotificationProgressData data, String tag);

        // Get the Notification Setting status for the app
        AppNotificationSetting Setting { get; };

        // Removes a specific Notification with a specific NotificationIdentifier from Action Centre
        Windows.Foundation.IAsyncAction RemoveByIdAsync(UInt32 notificationId);

        // Removes a Notification having a specific tag
        Windows.Foundation.IAsyncAction RemoveByTagAsync(String tag);

        // Removes a Notification having a specific tag and group
        Windows.Foundation.IAsyncAction RemoveByTagAndGroupAsync(String tag, String group);

        // Remove all Notifications for a specific group
        Windows.Foundation.IAsyncAction RemoveByGroupAsync(String group);

        // Removes all the Notifications for the App from Action Centre
        Windows.Foundation.IAsyncAction RemoveAllAsync();

        // Gets all the Notifications for the App from Action Centre
        Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVector<AppNotification> > GetAllAsync();
    
        // Checks to see if the APIs are supported for the Desktop app
        // Certain scenarios are unsupported by AppNotifications
        [contract(AppNotificationsContract, 2)]
        static Boolean IsSupported();
    }
}
